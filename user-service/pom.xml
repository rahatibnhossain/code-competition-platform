// common/src/main/java/com/platform/common/config/SecurityConfig.java
        @Configuration
        @EnableWebSecurity
        @EnableMethodSecurity(prePostEnabled = true)
        public class SecurityConfig {

        @Value("${spring.security.oauth2.resourceserver.jwt.issuer-uri}")
        private String issuerUri;

        @Bean
        public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
        .cors(Customizer.withDefaults())
        .csrf(AbstractHttpConfigurer::disable)
        .sessionManagement(session ->
        session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
        .authorizeHttpRequests(authz -> authz
        .requestMatchers("/actuator/health", "/public/**").permitAll()
        .anyRequest().authenticated()
        )
        .oauth2ResourceServer(oauth2 -> oauth2
        .jwt(jwt -> jwt.jwtAuthenticationConverter(jwtAuthenticationConverter()))
        );

        return http.build();
        }

        @Bean
        public JwtDecoder jwtDecoder() {
        return JwtDecoders.fromIssuerLocation(issuerUri);
        }

        private Converter<Jwt, AbstractAuthenticationToken> jwtAuthenticationConverter() {
        JwtAuthenticationConverter converter = new JwtAuthenticationConverter();
        converter.setJwtGrantedAuthoritiesConverter(jwtGrantedAuthoritiesConverter());
        return converter;
        }

        private Converter<Jwt, Collection<GrantedAuthority>> jwtGrantedAuthoritiesConverter() {
return jwt -> {
Map<String, Object> realmAccess = jwt.getClaimAsMap("realm_access");
Collection<String> roles = (Collection<String>) realmAccess.get("roles");

    return roles.stream()
    .map(role -> new SimpleGrantedAuthority("ROLE_" + role.toUpperCase()))
    .collect(Collectors.toList());
    };
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
    CorsConfiguration configuration = new CorsConfiguration();
    configuration.setAllowedOrigins(Arrays.asList("http://localhost:8082"));
    configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE"));
    configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type", "X-User-Id"));

    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
    source.registerCorsConfiguration("/**", configuration);
    return source;
    }
    }